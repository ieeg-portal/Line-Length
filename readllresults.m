function out = readllresults(filename, varargin)
  %READLLRESULTS  Reads LineLength results from binary file.
  %
  %   OUT = READLLRESULTS('fileName') reads all results from the binary
  %   file that was generated by the IEEGLinelenght method into a matlab
  %   structure.
  %
  %   OUT = READLLRESULTS('fileName', RANGE] only returns the results
  %   within the supplied RANGE, where RANGE is a [1x2] vector with the
  %   first and last indeces of the requested data.
  %
  %   The binary file-format contains a header followed by the data:
  %   
  %   [HEADER]
  %   DatasetName      160 x (char)
  %   NrChannels       1 x (uint32)
  %   ChannelIndeces   NrChannels x (uint32)
  %   WinL             1 x (uint32)
  %   Overlap          1 x (uint8)
  %   SampleRate       1 x (double)
  %   [DATA]
  %
  %   Example:
  %       results = READLLRESULTS('fileName');
  %
  %   See also: IEEGLinelength
  
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  % Copyright 2013 Trustees of the University of Pennsylvania
  % 
  % Licensed under the Apache License, Version 2.0 (the "License");
  % you may not use this file except in compliance with the License.
  % You may obtain a copy of the License at
  % 
  % http://www.apache.org/licenses/LICENSE-2.0
  % 
  % Unless required by applicable law or agreed to in writing, software
  % distributed under the License is distributed on an "AS IS" BASIS,
  % WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  % See the License for the specific language governing permissions and
  % limitations under the License.
  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  range = [];
  if nargin > 1
    assert(mod(length(varargin),2)==0,...
      'Number of optional arguments must be even.');
    for i = 1:2:length(varargin)
      switch varargin{i}
        case 'range'
          range = varargin{i+1};
      end
    end
  end
  
  
  fid = fopen(filename,'r');
  
  % Read header
  out = struct('name','',...
    'channels',[],...
    'winL',[],...
    'overlap',false,...
    'sampleRate',[],...
    'data',[]);
  
  out.name = strtrim(fread(fid,160,'*char')');
  nrChannels = fread(fid,1,'uint32');
  out.channels = fread(fid,nrChannels,'uint32');
  out.winL = fread(fid,1,'uint32');
  out.overlap = logical(fread(fid,1,'uint8'));
  out.sampleRate = (fread(fid,1,'double'));
  
  % Get Data
  if isempty(range)
    % Read all data
    data = fread(fid,'double');
  else
    % Skip to first index
    fseek(fid, nrChannels * (range(1)-1) * 8,'cof');
    % Read data
    nrRecords = diff(range) + 1 ;
    data = fread(fid, nrRecords*nrChannels, 'double');
  end
  
  out.data = reshape(data, nrChannels,[])';
  fclose(fid);
  
end